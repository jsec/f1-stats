generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://jsec@localhost/f1stats_relations"
}

model Circuit {
  id        Int      @id
  ref       String
  name      String
  city      String
  country   String
  latitude  Float
  longitude Float
  alt       String
  url       String
  createdAt DateTime
  updatedAt DateTime
  Race      Race[]
}

model Constructor {
  id                  Int                   @id
  ref                 String
  name                String
  nationality         String
  url                 String
  createdAt           DateTime
  updatedAt           DateTime
  ConstructorResult   ConstructorResult[]
  ConstructorStanding ConstructorStanding[]
  DriverStanding      DriverStanding[]
  Qualification       Qualification[]
  RaceResult          RaceResult[]
}

model ConstructorResult {
  id            Int          @id
  raceId        Int?
  constructorId Int?
  points        Int?
  statusId      Int?
  createdAt     DateTime
  updatedAt     DateTime
  Constructor   Constructor? @relation(fields: [constructorId], references: [id])
  Race          Race?        @relation(fields: [raceId], references: [id])
  Status        Status?      @relation(fields: [statusId], references: [id])
}

model Driver {
  id             Int              @id
  ref            String
  number         Int?
  code           String
  firstName      String
  lastName       String
  dob            DateTime
  nationality    String
  url            String
  createdAt      DateTime
  updatedAt      DateTime
  DriverStanding DriverStanding[]
  LapTime        LapTime[]
  PitStop        PitStop[]
  Qualification  Qualification[]
  RaceResult     RaceResult[]
}

model DriverStanding {
  id            Int          @id
  raceId        Int
  driverId      Int
  constructorId Int?
  points        Int
  position      Int
  positionText  String
  wins          Int
  createdAt     DateTime
  updatedAt     DateTime
  Constructor   Constructor? @relation(fields: [constructorId], references: [id])
  Driver        Driver       @relation(fields: [driverId], references: [id])
  Race          Race         @relation(fields: [raceId], references: [id])
}

model LapTime {
  id           Int      @id
  raceId       Int
  driverId     Int
  lap          Int
  position     Int
  time         DateTime
  milliseconds Int
  createdAt    DateTime
  updatedAt    DateTime
  Driver       Driver   @relation(fields: [driverId], references: [id])
  Race         Race     @relation(fields: [raceId], references: [id])
}

model PitStop {
  id           Int      @id
  raceId       Int
  driverId     Int
  stop         Int
  lap          Int
  time         DateTime
  duration     Float
  milliseconds Int
  createdAt    DateTime
  updatedAt    DateTime
  Driver       Driver   @relation(fields: [driverId], references: [id])
  Race         Race     @relation(fields: [raceId], references: [id])
}

model Qualification {
  id            Int         @id
  raceId        Int
  driverId      Int
  constructorId Int
  number        Int
  position      Int
  q1            DateTime?
  q2            DateTime?
  q3            DateTime?
  createdAt     DateTime
  updatedAt     DateTime
  Constructor   Constructor @relation(fields: [constructorId], references: [id])
  Driver        Driver      @relation(fields: [driverId], references: [id])
  Race          Race        @relation(fields: [raceId], references: [id])
}

model Race {
  id                  Int                   @id
  year                Int
  round               Int
  circuitId           Int
  name                String
  date                DateTime
  time                DateTime?
  url                 String
  createdAt           DateTime
  updatedAt           DateTime
  Circuit             Circuit               @relation(fields: [circuitId], references: [id])
  ConstructorResult   ConstructorResult[]
  ConstructorStanding ConstructorStanding[]
  DriverStanding      DriverStanding[]
  LapTime             LapTime[]
  PitStop             PitStop[]
  Qualification       Qualification[]
  RaceResult          RaceResult[]
}

model RaceResult {
  id              Int         @id
  raceId          Int
  driverId        Int
  constructorId   Int
  number          Int?
  grid            Int?
  position        Int?
  positionText    String
  positionOrder   Int
  points          Int
  laps            Int
  time            String?
  milliseconds    Int?
  fastestLap      Int?
  fastestLapRank  Int?
  fastestLapTime  DateTime?
  fastestLapSpeed Float?
  statusId        Int
  createdAt       DateTime
  updatedAt       DateTime
  Constructor     Constructor @relation(fields: [constructorId], references: [id])
  Driver          Driver      @relation(fields: [driverId], references: [id])
  Race            Race        @relation(fields: [raceId], references: [id])
  Status          Status      @relation(fields: [statusId], references: [id])
}

model Season {
  id        Int      @id
  year      Int
  url       String
  createdAt DateTime
  updatedAt DateTime
}

model Status {
  id                Int                 @id
  status            String
  createdAt         DateTime
  updatedAt         DateTime
  ConstructorResult ConstructorResult[]
  RaceResult        RaceResult[]
}

model ConstructorStanding {
  id            Int         @id
  raceId        Int
  constructorId Int
  points        Int
  position      Int
  positionText  String
  wins          Int
  createdAt     DateTime
  updatedAt     DateTime
  Constructor   Constructor @relation(fields: [constructorId], references: [id])
  Race          Race        @relation(fields: [raceId], references: [id])
}
